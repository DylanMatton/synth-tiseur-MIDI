library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
--use ieee.std_logic_arith.all;


library work;
use work.def.all;
			
--------------------------------------------------------------------------------------------------------------
entity VLQ_CALC is
 	port
 	(
 			clk: 								in std_logic;--clk pour faire un process séquentiel
 			reset: 							in std_logic;-- reset pour initialisé l'état du convertisseur
			req_vlq: 						in std_logic;-- demande de conversion de la fsm
			vlq_in:							in std_logic_vector(7 downto 0);--rélié à rom_vlq_ou
			rom_adr_in: 				in unsigned(31 downto 0);--adresse initiale donée par la fsm
			rom_adr_out: 				out unsigned(31 downto 0);--adresse incrémentée après la comparaisonde la donnée vlq
			rom_vlq_address :		out unsigned(31 downto 0);--adresse pour lire la mémoire en mode conversion
			res_vlq : 					out  unsigned(31 downto 0);--résultat de la conversion en entier
			state_vlq: 					out stateconv--état de la conversion  signalé à la fsm
 	);
end entity VLQ_CALC;
--------------------------------------------------------------------------------------------------------------
architecture A of VLQ_CALC is
---
signal cure_state:stateconv;--état de la conversion
signal next_state:stateconv;

signal cure_count:unsigned(2 downto 0);--compteur sur 3 bit car on lit 6 ou 5 byte au max
signal next_count:unsigned(2 downto 0);


signal cure_rom_vlq: unsigned(31 downto 0);--adresse de la rom actuel
signal next_rom_vlq: unsigned(31 downto 0);

signal cure_r:unsigned(31 downto 0);
signal next_r:unsigned(31 downto 0);
signal rdbg:unsigned(31 downto 0);

signal cure_req_vlq:std_logic;
signal next_req_vlq:std_logic;
---
begin
---
	FSM_NEXT_VLQ: process(clk,reset)
		begin
		if(clk'event and clk='1') then
		
			if(reset='1') then 
			
				cure_count			<=	"000";
				cure_r					<=	(others => '0');
				cure_req_vlq		<=	'0';
				cure_state			<=	ENDOFCONV;
				state_vlq				<=	ENDOFCONV;
				cure_rom_vlq		<= (others =>'0');
				rom_vlq_address	<= (others =>'0');
				rom_adr_out			<= (others =>'0');
				
			else
			
				state_vlq				<=	next_state;--vers la fsm
				cure_state			<=	next_state;
				
				cure_count			<=	next_count;
				cure_rom_vlq		<=	next_rom_vlq;
				
				cure_r					<=	next_r;
				res_vlq					<= 	next_r;
				
				rom_vlq_address	<=	next_rom_vlq;
				rom_adr_out			<=	next_rom_vlq;
				cure_rom_vlq		<=  next_rom_vlq;
				cure_req_vlq		<= 	next_req_vlq;--rajouté donc si ça ne marche pas c'est sûrement ça, pareil sur les autres lignes

			end if;
			
		end if;
	end process;
---
	FSM_VLQ: process(cure_state,cure_count,cure_r,cure_rom_vlq,req_vlq,rom_adr_in,vlq_in,cure_req_vlq)
		variable temp: unsigned( 31 downto 0);	
		variable temp2: unsigned( 7 downto 0);
		begin
		
		
		case cure_state is 
		
			when CONVON=>
				
				next_count		<=	cure_count + 1;
				next_rom_vlq	<=	cure_rom_vlq + 1;
				temp:= cure_r(24 downto 0)&"0000000";
				rdbg<= temp;
					if(unsigned(vlq_in)>=128) then
					temp2:=unsigned(vlq_in)-128;
					else
					temp2:=unsigned(vlq_in);
					end if;
				next_r<=	((temp)+temp2); 
			--conv_std_logic_vector(128,32))	
				if (cure_count>5) then 
					next_state<=ENDOFCONV;
				elsif (to_integer(unsigned(vlq_in))<128)then 
					next_state<=ENDOFCONV;
				else
					next_state<=CONVON;
				end if;
					
				when ENDOFCONV=>
				
					
					next_r				<=	cure_r;
					next_count		<=	"000";--pret pour une nouvelle conversion
					next_state		<=	ENDOFCONV;
					next_rom_vlq	<=	cure_rom_vlq;
					
					if(cure_req_vlq ='0' and req_vlq = '1') then 
						next_req_vlq <= '1';
						next_r				<=	(others =>'0');--initialisation pour la prochaine conversion
						next_rom_vlq<=unsigned(rom_adr_in);
						next_state<=CONVON;
					elsif (req_vlq = '0')then next_req_comp<='0';
					end if;
		
		end case;	
	
	end process;

end A;
