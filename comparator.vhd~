library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
library work;
use work.def.all;

--type str_cmd    is array(3 downto 0) of std_logic_vector(7 downto 0);--représente une chaîne de caractère de la commande à lire
--type statecmpr is (TESTON,ENDOFTEST);--état de la comparaison
			
----------------------------------------------------------------------------------------------------------------
entity COMP is
 	port
 	(	
	 	clk: 									in std_logic;
	 	reset: 								in std_logic;-- pour initialisé l'état de la fsm
	 	req_comp: 						in std_logic;-- pour que la fsm demande une nouvelle comparaison
	 	cmd: 									in str_cmd;--valeur d'une comande ou donnée à comparée
	 	comp_in : 						in std_logic_vector(7 downto 0);--rom_out	
	 	lenght : 							in unsigned(3 downto 0);--taille de la valeur à comparer
	 	rom_adr_in: 					in unsigned(31 downto 0);--adresse initiale donnée par la fsm
	 	rom_comp_address :		out unsigned(31 downto 0);--adresse pour lire la mémoire en mode conversion
		state_comp: 					out statecmpr;--indique si la comparaison et toujours en cours ou fini à la fsm
		res_comp : 						out  std_logic--indique si le résultat de la comparaison est valide
	);
end entity COMP;
----------------------------------------------------------------------------------------------------------------
architecture CMP of COMP is
----------------------------------------------------------------------------------------------------------------
signal cure_state:statecmpr;
signal next_state:statecmpr;

signal cure_count:unsigned(3 downto 0);
signal next_count:unsigned(3 downto 0);

signal cure_rom_comp: unsigned(31 downto 0);--adresse de la rom actuel
signal next_rom_comp: unsigned(31 downto 0);
signal cure_req_comp: std_logic;
signal next_req_comp: std_logic;

signal r: std_logic;--résultat temporaire
--signal cmdd:unsigned( 7 downto 0);
--signal romm:unsigned( 7 downto 0);
---
begin


	FSM_NEXT_COMP: process(clk,reset)
		begin
		if(clk'event and clk='1') then
		
			if(reset='1') then 
			
				cure_count	<=	"0000";
				--r						<=	'0';
				--res_comp    <=	'0';
				cure_state	<=	ENDOFTEST;
				state_comp	<=	ENDOFTEST;
				rom_comp_address	<=	(others =>'0');
				cure_rom_comp			<=	(others =>'0');
				cure_req_comp <= '0';
				
			else
				
				rom_comp_address	<=	next_rom_comp;
				cure_rom_comp			<=	next_rom_comp;
				state_comp				<=	next_state;
				cure_state				<=	next_state;
				cure_count				<=	next_count;
				cure_req_comp 		<= 	next_req_comp;--rajouté" donc si ça ne marche pas c'est ça pareil ailleurs
				
			end if;
			
		end if;
	end process;
---
	FSM_COMP: process(cure_state,req_comp,cure_count,cure_rom_comp,comp_in)
		begin
		--cmdd <= unsigned(cmd(to_integer(cure_count)));
		--romm <= unsigned(comp_in);
		case cure_state is 
		
				when TESTON=>
				
					if (unsigned(cmd(to_integer(cure_count)))=unsigned(comp_in)) then
						r						<=	'1';
						next_state<=TESTON;
					else
						r						<=	'0';
						next_state	<=	ENDOFTEST;
					end if;
					
					if (cure_count>=lenght-"0001") then 
						next_state<=ENDOFTEST;
					end if;
					next_count <= cure_count + "0001";
					next_rom_comp <= cure_rom_comp + 1;

				when ENDOFTEST=>
					
					res_comp			<=	r;--on retourne le resultat à la fsm
					next_count		<=	"0000";--pret pour une nouvelle conversion
					next_state		<=	ENDOFTEST;
					
					if(cure_req_comp ='0' and req_comp = '1') then
						next_req_comp<='1';
						next_rom_comp	<=	rom_adr_in;
						next_state		<=	TESTON;
					elsif (req_comp = '0')then next_req_comp<='0';
						
						
					end if;
					 
		end case;
	end process;

end CMP;
